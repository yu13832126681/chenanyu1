jdbc.driverClassName=com.mysql.jdbc.Driver
jdbc.url=jdbc:mysql://localhost:3306/oos_ssm?characterEncoding=UTF-8
jdbc.username=root
jdbc.password=root
jdbc.initialSize=10
jdbc.maxActive=50
jdbc.maxIdle=10
jdbc.minIdle=5
jdbc.maxWait=10
jdbc.removeAbandonedTimeout=7200
jdbc.removeAbandoned=true


#dbcp数据源配置属性
#jdbc.driverClassName=oracle.jdbc.driver.OracleDriver 		
#jdbc.url=jdbc:oracle:thin:@localhost:1521:joa			 		
#jdbc.username=system				
#jdbc.password=oracle				
#jdbc.initialSize=10 			
#jdbc.maxActive=50				
#jdbc.maxIdle=10 				
#jdbc.minIdle=5 				
#jdbc.maxWait=10 				
#jdbc.removeAbandonedTimeout=7200 
#jdbc.removeAbandoned=true
#initialSize ：连接池启动时创建的初始化连接数量（默认值为0）
#maxActive ：连接池中可同时连接的最大的连接数（默认值为8，调整为20，高峰单机器在20并发左右，自己根据应用场景定）
#maxIdle：连接池中最大的空闲的连接数，超过的空闲连接将被释放，如果设置为负数表示不限制（默认为8个，maxIdle不能设置太小，因为假如在高负载的情况下，连接的打开时间比关闭的时间快，会引起连接池中idle的个数 上升超过maxIdle，而造成频繁的连接销毁和创建，类似于jvm参数中的Xmx设置)
#minIdle：连接池中最小的空闲的连接数，低于这个数量会被创建新的连接（默认为0，调整为5，该参数越接近maxIdle，性能越好，因为连接的创建和销毁，都是需要消耗资源的；但是不能太大，因为在机器很空闲的时候，也会创建低于minidle个数的连接，类似于jvm参数中的Xmn设置）
#maxWait  ：最大等待时间，当没有可用连接时，连接池等待连接释放的最大时间，超过该时间限制会抛出异常，如果设置-1表示无限等待（默认为无限，调整为60000ms，避免因线程池不够用，而导致请求被无限制挂起）
#poolPreparedStatements：开启池的prepared（默认是false，未调整，经过测试，开启后的性能没有关闭的好。）
#maxOpenPreparedStatements：开启池的prepared 后的同时最大连接数（默认无限制，同上，未配置）
#minEvictableIdleTimeMillis  ：连接池中连接，在时间段内一直空闲， 被逐出连接池的时间
#（默认为30分钟，可以适当做调整，需要和后端服务端的策略配置相关）
#removeAbandonedTimeout  ：超过时间限制，回收没有用(废弃)的连接（默认为 300秒，调整为180）
#removeAbandoned  ：超过removeAbandonedTimeout时间后，是否进 行没用连接（废弃）的回收（默认为false，调整为true) 		

#proxool数据源配置属性
#jdbc.driver=oracle.jdbc.driver.OracleDriver 					
#jdbc.driverUrl=jdbc:oracle:thin:@localhost:1521:smartoa 					
#jdbc.user=root  						
#jdbc.password=root 					
#jdbc.maximumActiveTime=300000 			
#jdbc.maximumConnectionLifetime=18000000 	
#jdbc.houseKeepingSleepTime=900000 		
#jdbc.prototypeCount=0 			
#jdbc.maximumConnectionCount=50 	
#jdbc.minimumConnectionCount=10 	
#jdbc.simultaneousBuildThrottle=50 	
#jdbc.houseKeepingTestSql=select CURRENT_DATE 		

#house-keeping-sleep-time: house keeper 保留线程处于睡眠状态的最长时间,house keeper 的职责就是检查各个连接的状态,并判断是否需要销毁或者创建.
#house-keeping-test-sql:  如果发现了空闲的数据库连接.house keeper 将会用这个语句来测试.这个语句最好非常快的被执行.如果没有定义,测试过程将会被忽略。
#maximum-active-time: 如果housekeeper 检测到某个线程的活动时间大于这个数值.它将会杀掉这个线程.所以确认一下你的服务器的带宽.然后定一个合适的值.默认是5分钟.
#maximum-connection-count: 最大的数据库连接数.
#maximum-connection-lifetime: 一个线程的最大寿命.
#minimum-connection-count: 最小的数据库连接数
#overload-without-refusal-lifetime: 略
#prototype-count: 连接池中可用的连接数量.如果当前的连接池中的连接少于这个数值.新的连接将被建立(假设没有超过最大可用数).例如.我们有3个活动连接2个可用连接,而我们的prototype-count是4,那么数据库连接池将试图建立另外2个连接.这和 minimum-connection-count不同. minimum-connection-count把活动的连接也计算在内.prototype-count 是spare connections 的数量.


#c3p0数据源配置属性
#jdbc.driverClassName=oracle.jdbc.driver.OracleDriver
#jdbc.url=jdbc:oracle:thin:@localhost:1521:joa
#jdbc.username=scott
#jdbc.password=scott
#jdbc.checkoutTimeout=5000
#jdbc.minPoolSize=20
#jdbc.maxPoolSize=50
#jdbc.maxIdleTime=7200
#jdbc.maxIdleTimeExcessConnections=1800
#jdbc.acquireIncrement=10

#<c3p0-config>    
#<default-config>    
#<!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->    
#<property name="acquireIncrement">3</property>    
#  
#<!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->    
#<property name="acquireRetryAttempts">30</property>    
#  
#<!--两次连接中间隔时间，单位毫秒。Default: 1000 -->    
#<property name="acquireRetryDelay">1000</property>    
#  
#<!--连接关闭时默认将所有未提交的操作回滚。Default: false -->    
#<property name="autoCommitOnClose">false</property>    
#  
#<!--c3p0将建一张名为Test的空表，并使用其自带的查询语句进行测试。如果定义了这个参数那么    
#属性preferredTestQuery将被忽略。你不能在这张Test表上进行任何操作，它将只供c3p0测试    
#使用。Default: null-->    
#<property name="automaticTestTable">Test</property>    
#  
#<!--获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效    
#保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试    
#获取连接失败后该数据源将申明已断开并永久关闭。Default: false-->    
#<property name="breakAfterAcquireFailure">false</property>    
#  
#<!--当连接池用完时客户端调用getConnection()后等待获取新连接的时间，超时后将抛出    
#SQLException,如设为0则无限期等待。单位毫秒。Default: 0 -->    
#<property name="checkoutTimeout">100</property>    
#  
#<!--通过实现ConnectionTester或QueryConnectionTester的类来测试连接。类名需制定全路径。    
#Default: com.mchange.v2.c3p0.impl.DefaultConnectionTester-->    
#<property name="connectionTesterClassName"></property>    
#  
#<!--指定c3p0 libraries的路径，如果（通常都是这样）在本地即可获得那么无需设置，默认null即可    
#Default: null-->    
#<property name="factoryClassLocation">null</property>    
#  
#<!--Strongly disrecommended. Setting this to true may lead to subtle and bizarre bugs.    
#（文档原文）作者强烈建议不使用的一个属性-->    
#<property name="forceIgnoreUnresolvedTransactions">false</property>    
#  
#<!--每60秒检查所有连接池中的空闲连接。Default: 0 -->    
#<property name="idleConnectionTestPeriod">60</property>    
#  
#<!--初始化时获取三个连接，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->    
#<property name="initialPoolSize">3</property>    
#  
#<!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->    
#<property name="maxIdleTime">60</property>    
#  
#<!--连接池中保留的最大连接数。Default: 15 -->    
#<property name="maxPoolSize">15</property>   